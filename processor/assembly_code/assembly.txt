xor r0, r0 //r0 <- 0
//loading base address of image
ori r0, image_addr[31:26]
sli r0, 6
ori r0, image_addr[25:20]
sli r0, 6
ori r0, image_addr[19:14]
sli r0, 6
ori r0, image_addr[13:8]
sli r0, 6
ori r0, image_addr[7:2]
sli r0, 2
ori r0, image_addr[1:0]
//getting the height of the image
load r2, r0(0)
load r1, r0(1)
sli r1, 8
or r1, r2//r1 <- height of the image
//getting the width of the image
load r3, r0(2)
load r2, r0(3)
sli r2, 8
or r2, r3 // r2 <- width of the image
mov r4, r2 // r4 <- x <- width
mov r5, r1 // r5 <- y <- height
xor r3, r3//r3 <- 0
or r3, r0
add r3, 4 // r3 <- mem address of image[0][0]
loop2: xor r9, r9
load r8, r3(0)
mov r4, r2 // r4 <- x <- width
loop1: load r7, r3(1)
sli r8, 2
add r9, r8
add r9, r7
srai r9, 2
store r9, r3(0)
addi r3, 1 // coordinate of next pixel
sri r8, 1
mov r9, r8
mov r8, r7
addi r4, -1
beqz r4, loop1
addi r5, -1
beqz r5, loop2
mov r10, r0
add r10, 4 // r10 <- mem address of image[0][0]
mov r3, r10// r3 <- mem address of image[0][0]
mov r5, r2 // r5 <- x <- width
loop4: xor r9, r9
load r8, r3(0)
mov r4, r1 // r4 <- y <- height
mov r11, r3
loop3: add r11, r2
load r7, r11(0)
sli r8, 2
add r9, r8
add r9, r7
srai r9, 2
store r9, r3(0)
addi r3, r1 // coordinate of next pixel
sri r8, 1
mov r9, r8
mov r8, r7
addi r4, -1
beqz r4, loop3
addi r5, -1
add r10, 1//r10 <- address of new column
mov r3, r10
beqz r5, loop4
//downsampling
mov r10, r0
add r10, 4 // r10 <- mem address of image[0][0]
mov r3, r10// r3 <- mem address of image[0][0]
mov r13, r3// r13 <- mem address of image[0][0]//loading pixel address
mov r5, r1 // r5 <- y <- height
srai r5, 1
loop6:mov r4, r2 // r4 <- x <- width
srai r4, 1
loop5:load r12, r13(0)
store r12, r3(0)
addi r3, 1
addi r13, 2
addi r4, -1
beqz r4, loop5
add r10, r2
mov r13, r10
addi r5, -1
beqz r5, loop6
//changing the dimensions of the image
srai r1, 1
srai r2, 1
store r1, r0(0)
srai r1, 8
store r1, r0(1)
store r2, r0(2)
srai r2, 8
store r2, r0(3)
